The ``add_integer`` module.
======================
The `add_integer` function ensures that both `a` and `b` are either integers or floats.
If either value is a float, it will be cast to an integer before performing the addition.
If the values are not valid types, the function raises a `TypeError` with an appropriate error message.

Using ``add_integer``
-------------------

First import ``add_integer`` from the ``0-add_integer`` file:

    >>> add = __import__('0-add_integer').add_integer

Test:

    >>> add(1, 2)
    3

    >>> add(5.5, -1)
    4

    Handle invalid types:

    >>> add(2, "School")
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

    Handle missing arguments:

    Test - a is none
    >>> add(None)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

    Missing One Argument

    >>> add(5)
    103

     Missing Two Arguments

    >>> add()
    Traceback (most recent call last):
        ...
    TypeError: add_integer() missing 1 required positional argument: 'a'

     Float Overflow

    Handle float overflow:

    >>> add(1e1000, 2)
    Traceback (most recent call last):
        ...
    OverflowError: cannot convert float infinity to integer

     Float NaN to Integer

    Handle `float('NaN')`:

    >>> add(float('NaN'), 2)
    Traceback (most recent call last):
        ...
    ValueError: cannot convert float NaN to integer