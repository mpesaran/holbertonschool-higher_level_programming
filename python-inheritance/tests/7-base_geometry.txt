The ``base_geometry`` module.
======================

Using ``base_geometry``
-------------------

First import `base_geometry`` from the ``7-base_geometry`` file:

    >>> base_geometry = __import__('7-base_geometry').BaseGeometry

Test:

   
    >>> bg = base_geometry()
    >>> bg.integer_validator("name", "Jhon")
    Traceback (most recent call last):
    ...
    TypeError: name must be an integer

    >>> bg = base_geometry()
    >>> bg.integer_validator("age", 8)

    >>> bg = base_geometry()
    >>> bg.integer_validator("age",)
    Traceback (most recent call last):
    ...
    TypeError: integer_validator() missing 1 required positional argument: 'value'

    >>> bg = base_geometry()
    >>> bg.integer_validator("age", -2)
    Traceback (most recent call last):
    ...
    ValueError: age must be greater than 0

    >>> bg = base_geometry()
    >>> bg.integer_validator("age", 0)
    Traceback (most recent call last):
    ...
    ValueError: age must be greater than 0

    >>> bg = base_geometry()
    >>> bg.area()
    Traceback (most recent call last):
    ...
    Exception: area() is not implemented

    >>> bg = base_geometry()
    >>> bg.integer_validator("age", (4,))
    Traceback (most recent call last):
    ...
    TypeError: age must be an integer

    >>> bg = base_geometry()
    >>> bg.integer_validator("age", [3])
    Traceback (most recent call last):
    ...
    TypeError: age must be an integer

    >>> bg = base_geometry()
    >>> bg.integer_validator("age", True)
    Traceback (most recent call last):
    ...
    TypeError: age must be an integer

      >>> bg = base_geometry()
    >>> bg.integer_validator("age", {3, 4})
    Traceback (most recent call last):
    ...
    TypeError: age must be an integer

      >>> bg = base_geometry()
    >>> bg.integer_validator("age", None)
    Traceback (most recent call last):
    ...
    TypeError: age must be an integer